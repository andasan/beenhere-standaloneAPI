{"version":3,"sources":["shared/hooks/HttpHook.jsx","shared/components/CustomTextInput.jsx","places-feature/container/UpdatePlace.jsx"],"names":["useHttpClient","useState","isLoading","setIsLoading","error","setError","errorStatusCode","useSelector","state","dispatch","useDispatch","activeHttpRequests","useRef","sendRequest","useCallback","url","a","method","body","headers","httpAbortController","AbortController","current","push","fetch","signal","response","json","responseData","filter","reqCtrl","ok","err","Error","message","status","code","type","payload","useEffect","forEach","abortCtrl","abort","clearError","CustomTextInput","label","props","setFieldValue","useField","field","meta","className","htmlFor","_id","name","touched","data-error","id","UpdatePlace","loadedPlace","setLoadedPlace","isError","setIsError","placeId","useParams","pid","history","useHistory","userId","token","process","place","fetchPlace","placeUpdateSubmitHandler","e","value","preventDefault","JSON","stringify","title","description","Authorization","validationSchema","Yup","min","required","errorHandler","initialValues","onSubmit","values","setSubmitting","resetForm","disabled","isSubmitting"],"mappings":"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","file":"static/js/9.2c99ab3b.chunk.js","sourcesContent":["import { useState, useCallback, useRef, useEffect } from \"react\";\nimport { useSelector, useDispatch } from 'react-redux';\n\nexport const useHttpClient = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState();\n\n  const { errorStatusCode } = useSelector(state => state);\n  const dispatch = useDispatch();\n\n  //store data across rerender cycles\n  const activeHttpRequests = useRef([]);\n\n  const sendRequest = useCallback(\n    async (url, method = \"GET\", body = null, headers = {}) => {\n      setIsLoading(true);\n\n      const httpAbortController = new AbortController();\n      activeHttpRequests.current.push(httpAbortController);\n      try {\n        const response = await fetch(url, {\n          method,\n          body,\n          headers,\n          signal: httpAbortController.signal, //to cancel connected request\n        });\n\n        const responseData = await response.json();\n\n        //remove active http requests when successful render\n        activeHttpRequests.current = activeHttpRequests.current.filter(\n          (reqCtrl) => reqCtrl !== httpAbortController\n        );\n\n        if (!response.ok) {\n          // throw new Error(responseData.message);\n          let err = new Error(responseData.message);\n          err.status = responseData.code;\n          throw err;\n        }\n\n        setIsLoading(false);\n        return responseData;\n      } catch (err) {\n        dispatch({ type: \"ERR_STATUS_CODE\", payload: err.status })\n        setError(err.message);\n        setIsLoading(false);\n        throw err;\n      }\n    },\n    []\n  );\n\n  const clearError = () => {\n\n    if(errorStatusCode === 403 || errorStatusCode === 401){\n      dispatch({ type: 'LOGOUT'});\n    }\n    setError(null);\n  };\n\n  //cleanup function, we never continue with the request\n  useEffect(() => {\n    return () => {\n      activeHttpRequests.current.forEach((abortCtrl) => abortCtrl.abort());\n    };\n  }, []);\n\n  return { isLoading, error, sendRequest, clearError };\n};\n","import React from \"react\";\nimport TextareaAutosize from \"react-textarea-autosize\";\nimport { useField } from \"formik\";\n\nconst CustomTextInput = ({ label, setFieldValue, ...props }) => {\n  const [field, meta] = useField(props);\n\n  switch (props.type) {\n    case \"text\":\n      return (\n        <div className=\"input-field col s12\">\n          <input {...field} {...props} />\n          <label\n            className=\"white-text active\"\n            htmlFor={props._id || props.name}\n          >\n            {label}\n          </label>\n          {meta.touched && meta.error ? (\n            <span className=\"helper-text\" data-error={meta.error}>\n              {meta.error}\n            </span>\n          ) : null}\n        </div>\n      );\n    case \"email\":\n      return (\n        <div className=\"input-field col s12\">\n          <input {...field} {...props} />\n          <label\n            className=\"white-text active\"\n            htmlFor={props._id || props.name}\n          >\n            {label}\n          </label>\n          {meta.touched && meta.error ? (\n            <span className=\"helper-text\" data-error={meta.error}>\n              {meta.error}\n            </span>\n          ) : null}\n        </div>\n      );\n\n    case \"password\":\n      return (\n        <div className=\"input-field col s12\">\n          <input {...field} {...props} />\n          <label\n            className=\"white-text active\"\n            htmlFor={props._id || props.name}\n          >\n            {label}\n          </label>\n          {meta.touched && meta.error ? (\n            <span className=\"helper-text\" data-error={meta.error}>\n              {meta.error}\n            </span>\n          ) : null}\n        </div>\n      );\n\n    default:\n      return (\n        <div className=\"input-field col s12\">\n          <TextareaAutosize\n            className=\"materialize-textarea\"\n            {...field}\n            {...props}\n            id=\"text-area\"\n          />\n          <label\n            className=\"white-text active\"\n            htmlFor={props._id || props.name}\n          >\n            {label}\n          </label>\n          {meta.touched && meta.error ? (\n            <div className=\"meta-error\">{meta.error}</div>\n          ) : null}\n        </div>\n      );\n  }\n};\n\nexport default CustomTextInput;\n","import React, { useState, useEffect } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { Formik, Form } from \"formik\";\nimport * as Yup from \"yup\";\nimport { useSelector } from \"react-redux\";\n\nimport CustomTextInput from \"../../shared/components/CustomTextInput\";\nimport { useHttpClient } from \"../../shared/hooks/HttpHook\";\nimport { ModalError, ModalLoader } from \"../../shared/components/Modals\";\n\nconst UpdatePlace = () => {\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const [loadedPlace, setLoadedPlace] = useState();\n  const [isError, setIsError] = useState(false);\n  const placeId = useParams().pid;\n  const history = useHistory();\n\n  const {userId, token} = useSelector((state) => state);\n\n  useEffect(() => {\n    const fetchPlace = async () => {\n      try {\n        const responseData = await sendRequest(\n          `${process.env.REACT_APP_BACKEND_URL}/api/places/${placeId}`\n        );\n        setLoadedPlace(responseData.place);\n      } catch (err) {\n        setIsError(true);\n      }\n    };\n    fetchPlace();\n  }, [sendRequest, placeId]);\n\n  const placeUpdateSubmitHandler = async (e, value) => {\n    e.preventDefault();\n    try {\n      await sendRequest(\n        `${process.env.REACT_APP_BACKEND_URL}/api/places/${placeId}`,\n        \"PATCH\",\n        JSON.stringify({\n          title: value.title,\n          description: value.description,\n        }),\n        {\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + token\n        }\n      );\n      history.push(`/${userId}/places`);\n    } catch (err) {\n      setIsError(true);\n    }\n  };\n\n  if (!loadedPlace && !error) {\n    return (\n      <div className=\"row center\">\n        <h2>Could not find place!</h2>\n      </div>\n    );\n  }\n\n  const validationSchema = Yup.object({\n    title: Yup.string()\n      .min(3, \"Must be more than 3 characters\")\n      .required(\"A title is require\"),\n    description: Yup.string().required(\"A description is required\"),\n  });\n\n  const errorHandler = () => {\n    clearError();\n    setIsError(false);\n  };\n\n  return (\n    <div>\n      <ModalLoader isLoading={isLoading} />\n      <ModalError isError={isError} errorHandler={errorHandler} error={error} />\n\n      {!isLoading && loadedPlace && (\n        <Formik\n          initialValues={loadedPlace}\n          validationSchema={validationSchema}\n          onSubmit={(values, { setSubmitting, resetForm }) => {\n            resetForm();\n            setSubmitting(false);\n          }}\n        >\n          {(props) => {\n            return (\n              <div className=\"row\">\n                <div className=\"col s6 offset-s3\">\n                  <Form onSubmit={(e) => placeUpdateSubmitHandler(e, props.values)}>\n                    <h1>Edit a Place</h1>\n                    <CustomTextInput label=\"Title\" name=\"title\" type=\"text\" />\n                    <CustomTextInput\n                      label=\"Description\"\n                      name=\"description\"\n                      type=\"textarea\"\n                    />\n                    {/* <CustomTextInput label=\"Address\" name=\"address\" type=\"text\" /> */}\n                    <button\n                      className=\"waves-effect waves-light btn white-text green darken-4\"\n                      type=\"submit\"\n                      disabled={!!props.isSubmitting}\n                    >\n                      {props.isSubmitting ? \"Loading...\" : \"Submit\"}\n                      <i className=\"material-icons right\">send</i>\n                    </button>\n                  </Form>\n                </div>\n              </div>\n            );\n          }}\n        </Formik>\n      )}\n    </div>\n  );\n};\n\nexport default UpdatePlace;"],"sourceRoot":""}