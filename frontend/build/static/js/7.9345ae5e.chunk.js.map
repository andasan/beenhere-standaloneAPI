{"version":3,"sources":["shared/hooks/HttpHook.jsx","shared/components/CustomTextInput.jsx","util/validators.js","shared/components/CustomImageInputStyle.js","shared/components/CustomImageInput.jsx","places-feature/container/NewPlace.jsx"],"names":["useHttpClient","useState","isLoading","setIsLoading","error","setError","errorStatusCode","useSelector","state","dispatch","useDispatch","activeHttpRequests","useRef","sendRequest","useCallback","url","a","method","body","headers","httpAbortController","AbortController","current","push","fetch","signal","response","json","responseData","filter","reqCtrl","ok","err","Error","message","status","code","type","payload","useEffect","forEach","abortCtrl","abort","clearError","CustomTextInput","label","props","setFieldValue","useField","field","meta","className","htmlFor","_id","name","touched","data-error","id","SUPPORTED_FORMATS","newplaceValidationSchema","Yup","title","min","required","description","address","file","test","value","size","includes","loginValidationSchema","email","password","matches","signinValidationSchema","username","confirmPassword","oneOf","customImageInputStyle","theme","hidden","display","container","margin","marginBottom","justifyContent","padding","spacing","errorMsg","bigAvatar","width","height","borderStyle","borderSize","cursor","avatarThumb","objectFit","primaryBack","background","whiteBack","errorBack","palette","main","withStyles","fileUpload","setFile","imagePreviewUrl","setImagePreviewUrl","errorMessage","classes","onBlur","avatarStyle","classnames","onChange","e","preventDefault","reader","FileReader","uploadedFile","target","files","onloadend","result","readAsDataURL","ref","accept","Typography","variant","Avatar","onClick","click","Icon","style","fontSize","src","alt","color","NewPlace","isError","setIsError","userId","token","history","useHistory","placeSubmitHandler","values","formData","FormData","append","creator","process","Authorization","errorHandler","initialValues","undefined","validationSchema","onSubmit","setSubmitting","resetForm","submitForm","errors","handleBlur","isSubmitting","component","CustomImageInput","disabled"],"mappings":"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","file":"static/js/7.9345ae5e.chunk.js","sourcesContent":["import { useState, useCallback, useRef, useEffect } from \"react\";\nimport { useSelector, useDispatch } from 'react-redux';\n\nexport const useHttpClient = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState();\n\n  const { errorStatusCode } = useSelector(state => state);\n  const dispatch = useDispatch();\n\n  //store data across rerender cycles\n  const activeHttpRequests = useRef([]);\n\n  const sendRequest = useCallback(\n    async (url, method = \"GET\", body = null, headers = {}) => {\n      setIsLoading(true);\n\n      const httpAbortController = new AbortController();\n      activeHttpRequests.current.push(httpAbortController);\n      try {\n        const response = await fetch(url, {\n          method,\n          body,\n          headers,\n          signal: httpAbortController.signal, //to cancel connected request\n        });\n\n        const responseData = await response.json();\n\n        //remove active http requests when successful render\n        activeHttpRequests.current = activeHttpRequests.current.filter(\n          (reqCtrl) => reqCtrl !== httpAbortController\n        );\n\n        if (!response.ok) {\n          // throw new Error(responseData.message);\n          let err = new Error(responseData.message);\n          err.status = responseData.code;\n          throw err;\n        }\n\n        setIsLoading(false);\n        return responseData;\n      } catch (err) {\n        dispatch({ type: \"ERR_STATUS_CODE\", payload: err.status })\n        setError(err.message);\n        setIsLoading(false);\n        throw err;\n      }\n    },\n    []\n  );\n\n  const clearError = () => {\n\n    if(errorStatusCode === 403 || errorStatusCode === 401){\n      dispatch({ type: 'LOGOUT'});\n    }\n    setError(null);\n  };\n\n  //cleanup function, we never continue with the request\n  useEffect(() => {\n    return () => {\n      activeHttpRequests.current.forEach((abortCtrl) => abortCtrl.abort());\n    };\n  }, []);\n\n  return { isLoading, error, sendRequest, clearError };\n};\n","import React from \"react\";\nimport TextareaAutosize from \"react-textarea-autosize\";\nimport { useField } from \"formik\";\n\nconst CustomTextInput = ({ label, setFieldValue, ...props }) => {\n  const [field, meta] = useField(props);\n\n  switch (props.type) {\n    case \"text\":\n      return (\n        <div className=\"input-field col s12\">\n          <input {...field} {...props} />\n          <label\n            className=\"white-text active\"\n            htmlFor={props._id || props.name}\n          >\n            {label}\n          </label>\n          {meta.touched && meta.error ? (\n            <span className=\"helper-text\" data-error={meta.error}>\n              {meta.error}\n            </span>\n          ) : null}\n        </div>\n      );\n    case \"email\":\n      return (\n        <div className=\"input-field col s12\">\n          <input {...field} {...props} />\n          <label\n            className=\"white-text active\"\n            htmlFor={props._id || props.name}\n          >\n            {label}\n          </label>\n          {meta.touched && meta.error ? (\n            <span className=\"helper-text\" data-error={meta.error}>\n              {meta.error}\n            </span>\n          ) : null}\n        </div>\n      );\n\n    case \"password\":\n      return (\n        <div className=\"input-field col s12\">\n          <input {...field} {...props} />\n          <label\n            className=\"white-text active\"\n            htmlFor={props._id || props.name}\n          >\n            {label}\n          </label>\n          {meta.touched && meta.error ? (\n            <span className=\"helper-text\" data-error={meta.error}>\n              {meta.error}\n            </span>\n          ) : null}\n        </div>\n      );\n\n    default:\n      return (\n        <div className=\"input-field col s12\">\n          <TextareaAutosize\n            className=\"materialize-textarea\"\n            {...field}\n            {...props}\n            id=\"text-area\"\n          />\n          <label\n            className=\"white-text active\"\n            htmlFor={props._id || props.name}\n          >\n            {label}\n          </label>\n          {meta.touched && meta.error ? (\n            <div className=\"meta-error\">{meta.error}</div>\n          ) : null}\n        </div>\n      );\n  }\n};\n\nexport default CustomTextInput;\n","import * as Yup from \"yup\";\n\nconst FILE_SIZE = 3000000;\n  const SUPPORTED_FORMATS = [\n    \"image/jpg\",\n    \"image/jpeg\",\n    \"image/gif\",\n    \"image/png\",\n  ];\n\nexport const newplaceValidationSchema = Yup.object({\n  title: Yup.string()\n    .min(3, \"Must be at least 3 characters\")\n    .required(\"A title is required\"),\n  description: Yup.string().required(\"A description is required\"),\n  address: Yup.string().required(\"An address is required\"),\n  file: Yup.mixed()\n    .required(\"Image is required\")\n    .test(\n      \"fileSize\",\n      \"File too large. Image upload size limit is 3MB.\",\n      (value) => value && value.size <= FILE_SIZE\n    )\n    .test(\n      \"fileFormat\",\n      \"Unsupported Format\",\n      (value) => value && SUPPORTED_FORMATS.includes(value.type)\n    ),\n});\n\nexport const loginValidationSchema = Yup.object({\n  email: Yup.string().email(\"Email is invalid\").required(\"Email is required\"),\n  password: Yup.string()\n    .min(8, \"Password has to be longer than 6 characters!\")\n    .required(\"Please Enter your password\")\n    .matches(\n      /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/,\n      \"Must Contain 8 Characters, One Uppercase, One Lowercase, One Number and one special case Character\"\n    ),\n});\n\nexport const signinValidationSchema = Yup.object({\n  username: Yup.string()\n    .required(\"Username is required\")\n    .min(3, \"Must be at least 3 characters long\"),\n  email: Yup.string().email(\"Email is invalid\").required(\"Email is required\"),\n  file: Yup.mixed()\n    .required(\"Avatar is required\")\n    .test(\n      \"fileSize\",\n      \"File too large. Image upload size limit is 3MB.\",\n      (value) => value && value.size <= FILE_SIZE\n    )\n    .test(\n      \"fileFormat\",\n      \"Unsupported Format\",\n      (value) => value && SUPPORTED_FORMATS.includes(value.type)\n    ),\n  password: Yup.string()\n    .min(8, \"Password has to be longer than 6 characters!\")\n    .required(\"Please Enter your password\")\n    .matches(\n      /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/,\n      \"Must Contain 8 Characters, One Uppercase, One Lowercase, One Number and one special case Character\"\n    ),\n  confirmPassword: Yup.string()\n    .oneOf([Yup.ref(\"password\"), null], \"Passwords are not the same!\")\n    .required(\"Password confirmation is required!\"),\n});","const customImageInputStyle = theme => ({\n    hidden: { display: \"none\" },\n\n    container: {\n        margin: \"auto\",\n        marginBottom: \"30px\"\n    },\n    title: {\n        margin: \"auto\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        padding: theme.spacing(2)\n    },\n    errorMsg: {\n        margin: \"auto\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        padding: theme.spacing(2)\n    },\n    bigAvatar: {\n        margin: \"auto\",\n        width: 140,\n        height: 140,\n        // borderColor: theme.palette.primary.light,\n        borderStyle: \"solid\",\n        borderSize: \"1px\",\n        cursor: \"pointer\"\n    },\n    avatarThumb: {\n        width: \"100%\",\n        height: \"100%\",\n        objectFit: \"cover\"\n    },\n    primaryBack: {\n        background: \"#FFF\"\n    },\n    whiteBack: {\n        background: \"white\"\n    },\n\n    errorBack: { background: theme.palette.error.main }\n});\nexport default customImageInputStyle;\n","import React, { useState, useRef } from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Icon from \"@material-ui/core/Icon\";\nimport Avatar from \"@material-ui/core/Avatar\";\n\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport customImageInputStyle from \"./CustomImageInputStyle\";\nimport classnames from \"classnames\";\n\nconst CustomImageInput = (props) => {\n  const fileUpload = useRef();\n  const [file, setFile] = useState();\n  const [imagePreviewUrl, setImagePreviewUrl] = useState();\n  const { errorMessage, title, classes } = props;\n  const { name, onBlur } = props.field;\n\n  const showFileUpload = () => {\n    if (fileUpload) {\n      fileUpload.current.click();\n    }\n  };\n\n  const handleImageChange = (e) => {\n    e.preventDefault();\n    let reader = new FileReader();\n    let uploadedFile = e.target.files[0];\n    if (uploadedFile) {\n      reader.onloadend = () => {\n        setFile(uploadedFile);\n        setImagePreviewUrl(reader.result);\n      };\n      reader.readAsDataURL(uploadedFile);\n      props.setFieldValue(props.field.name, uploadedFile);\n    }\n  };\n\n  const showPreloadImage = () => {\n    let comp = null;\n\n    if (errorMessage) {\n      comp = <Icon style={{ fontSize: 36 }}>error_outline</Icon>;\n    } else if (file) {\n      comp = (\n        <img className={classes.avatarThumb} src={imagePreviewUrl} alt=\"...\" />\n      );\n    } else {\n      comp = <Icon style={{ fontSize: 36, color: \"#e65100\" }}>image</Icon>;\n    }\n    return comp;\n  };\n\n  const avatarStyle = classnames(\n    classes.bigAvatar,\n    file ? [classes.whiteBack] : [classes.primaryBack],\n    { [classes.errorBack]: errorMessage }\n  );\n\n  return (\n    <div className={classes.container}>\n      <input\n        className={classes.hidden}\n        id={name}\n        name={name}\n        type=\"file\"\n        onChange={handleImageChange}\n        ref={fileUpload}\n        accept=\".jpg,.jpeg,.png,.gif\"\n        onBlur={onBlur}\n        //className=\"form-control\"\n      />\n      <Typography className={classes.title} variant=\"h5\">\n        {title}\n      </Typography>\n      <Avatar className={avatarStyle} onClick={showFileUpload}>\n        {showPreloadImage()}\n      </Avatar>\n\n      {errorMessage ? (\n        <Typography\n          className={classes.errorMsg}\n          variant=\"caption\"\n          color=\"error\"\n        >\n          {errorMessage}\n        </Typography>\n      ) : null}\n    </div>\n  );\n};\n\nexport default withStyles(customImageInputStyle)(CustomImageInput);\n","import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Formik, Form, Field } from \"formik\";\nimport { useSelector } from \"react-redux\";\n\nimport CustomTextInput from \"../../shared/components/CustomTextInput\";\nimport CustomImageInput from \"../../shared/components/CustomImageInput\";\nimport { useHttpClient } from \"../../shared/hooks/HttpHook\";\nimport { ModalError, ModalLoader } from \"../../shared/components/Modals\";\nimport { newplaceValidationSchema } from \"../../util/validators\"\n\nconst NewPlace = () => {\n  const [isError, setIsError] = useState(false);\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n\n  const { userId, token } = useSelector((state) => state);\n\n  const history = useHistory();\n\n  const placeSubmitHandler = async (values) => {\n    const formData = new FormData(); //built into browser and JavaScript\n    formData.append(\"title\", values.title);\n    formData.append(\"description\", values.description);\n    formData.append(\"address\", values.address);\n    formData.append(\"creator\", values.creator);\n    formData.append(\"image\", values.file);\n\n    try {\n      await sendRequest(`${process.env.REACT_APP_BACKEND_URL}/api/places/`, \"POST\", formData, {\n        Authorization: \"Bearer \" + token, \n      });\n\n      history.push(`/${userId}/places`);\n    } catch (err) {\n      setIsError(true);\n    }\n  };\n\n  const errorHandler = () => {\n    clearError();\n    setIsError(false);\n  };\n\n  return (\n    <div>\n      <ModalLoader isLoading={isLoading} />\n      <ModalError isError={isError} errorHandler={errorHandler} error={error} />\n\n      <Formik\n        initialValues={{\n          title: \"\",\n          description: \"\",\n          address: \"\",\n          creator: userId,\n          file: undefined,\n        }}\n        validationSchema={newplaceValidationSchema}\n        onSubmit={(values, { setSubmitting, resetForm, submitForm }) => {\n          resetForm();\n          setSubmitting(false);\n          submitForm();\n          placeSubmitHandler(values);\n        }}\n      >\n        {({\n          errors,\n          touched,\n          handleBlur,\n          setFieldValue,\n          isSubmitting,\n        }) => {\n          return (\n            <div className=\"row\">\n              <div className=\"col s6 offset-s3\">\n                <Form>\n                  <h1>Create a Place</h1>\n\n                  <Field\n                    name=\"file\"\n                    component={CustomImageInput}\n                    title=\"Select a file\"\n                    setFieldValue={setFieldValue}\n                    errorMessage={errors[\"file\"] ? errors[\"file\"] : undefined}\n                    touched={touched[\"file\"]}\n                    style={{ display: \"flex\" }}\n                    onBlur={handleBlur}\n                  />\n\n                  <CustomTextInput label=\"Title\" name=\"title\" type=\"text\" />\n                  <CustomTextInput\n                    label=\"Description\"\n                    name=\"description\"\n                    type=\"textarea\"\n                  />\n                  <CustomTextInput label=\"Address\" name=\"address\" type=\"text\" />\n                  <button\n                    className=\"waves-effect waves-light btn white-text green darken-4\"\n                    type=\"submit\"\n                    disabled={isSubmitting}\n                  >\n                    {isSubmitting ? \"Loading...\" : \"Submit\"}\n                    <i className=\"material-icons right\">send</i>\n                  </button>\n                </Form>\n              </div>\n              {/* <pre>{JSON.stringify(values, null, 2)}</pre> */}\n            </div>\n          );\n        }}\n      </Formik>\n    </div>\n  );\n};\n\nexport default NewPlace;\n"],"sourceRoot":""}